"""
Script de teste para validar a aplica√ß√£o antes da execu√ß√£o completa
"""

import logging
from config import IDS, PERIODOS, BASE_URL, FIXED_PARAMS
from api_client import APIClient

# Configurar logging para teste
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_single_request():
    """Testa uma √∫nica requisi√ß√£o para validar a conectividade"""
    logger.info("=== TESTE DE CONECTIVIDADE ===")
    
    # Testar com o primeiro ID e per√≠odo
    test_id = IDS[0]
    test_periodo = PERIODOS[0]
    
    logger.info(f"Testando requisi√ß√£o para ID={test_id}, Per√≠odo={test_periodo}")
    logger.info(f"URL: {BASE_URL}")
    logger.info(f"Par√¢metros: {FIXED_PARAMS}")
    
    try:
        client = APIClient()
        
        # Fazer uma requisi√ß√£o de teste
        response = client.get_rentabilidade_data(test_id, test_periodo)
        
        if response:
            logger.info("‚úÖ Teste de conectividade bem-sucedido!")
            logger.info(f"Status Code: {response.get('status_code')}")
            logger.info(f"Dados recebidos: {type(response.get('data'))}")
            
            # Mostrar estrutura dos dados
            data = response.get('data')
            if isinstance(data, dict):
                logger.info(f"Chaves dispon√≠veis: {list(data.keys())}")
                
                # Verificar se cont√©m a estrutura de rentabilidade esperada
                if "Rentabilidades" in data:
                    rentabilidades = data.get("Rentabilidades", [])
                    if isinstance(rentabilidades, list):
                        logger.info(f"‚úÖ Estrutura de rentabilidade encontrada com {len(rentabilidades)} registros")
                        
                        # Mostrar exemplo do primeiro registro
                        if rentabilidades:
                            primeiro = rentabilidades[0]
                            logger.info(f"Exemplo de campos: {list(primeiro.keys())}")
                    else:
                        logger.warning("Campo 'Rentabilidades' n√£o √© uma lista")
                else:
                    logger.warning("Campo 'Rentabilidades' n√£o encontrado na resposta")
                    
            elif isinstance(data, list):
                logger.info(f"Lista com {len(data)} itens")
            else:
                logger.info(f"Tipo de dado: {type(data)}")
                
        else:
            logger.error("‚ùå Falha no teste de conectividade")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante teste: {e}")
        return False
    
    finally:
        client.close()
    
    return True


def test_configuration():
    """Testa se as configura√ß√µes est√£o corretas"""
    logger.info("=== VALIDA√á√ÉO DE CONFIGURA√á√ÉO ===")
    
    # Verificar se todos os IDs s√£o n√∫meros
    if not all(isinstance(id_val, int) for id_val in IDS):
        logger.error("‚ùå IDs devem ser n√∫meros inteiros")
        return False
    
    # Verificar se todos os per√≠odos s√£o n√∫meros de 1 a 8
    if not all(1 <= p <= 8 for p in PERIODOS):
        logger.error("‚ùå Per√≠odos devem estar entre 1 e 8")
        return False
    
    # Verificar se a URL est√° configurada
    if not BASE_URL:
        logger.error("‚ùå URL base n√£o configurada")
        return False
    
    # Verificar par√¢metros fixos
    required_params = ["IdContaCorrente", "ProdutoSelecionado", "BenchmarkSelecionado", "MaximoPontosRetornados"]
    for param in required_params:
        if param not in FIXED_PARAMS:
            logger.error(f"‚ùå Par√¢metro obrigat√≥rio ausente: {param}")
            return False
    
    logger.info("‚úÖ Configura√ß√£o v√°lida")
    logger.info(f"Total de IDs: {len(IDS)}")
    logger.info(f"Total de per√≠odos: {len(PERIODOS)}")
    logger.info(f"Total de requisi√ß√µes: {len(IDS) * len(PERIODOS)}")
    
    return True


def main():
    """Fun√ß√£o principal do teste"""
    logger.info("Iniciando testes da aplica√ß√£o...")
    
    # Testar configura√ß√£o
    if not test_configuration():
        logger.error("‚ùå Falha na valida√ß√£o de configura√ß√£o")
        return False
    
    # Testar conectividade
    if not test_single_request():
        logger.error("‚ùå Falha no teste de conectividade")
        return False
    
    logger.info("‚úÖ Todos os testes passaram com sucesso!")
    logger.info("A aplica√ß√£o est√° pronta para execu√ß√£o completa.")
    
    return True


if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Testes conclu√≠dos com sucesso!")
        print("Execute 'python main.py' para iniciar a coleta completa de dados.")
    else:
        print("\nüí• Testes falharam!")
        print("Verifique as configura√ß√µes e conectividade antes de executar a aplica√ß√£o principal.")
    
    exit(0 if success else 1)
