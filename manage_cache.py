#!/usr/bin/env python3
"""
Script para gerenciar o cache da aplica√ß√£o
"""

import argparse
import sys
import logging
from cache_manager import CacheManager
from config import CACHE_DIR

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """Fun√ß√£o principal do script de gerenciamento de cache"""
    parser = argparse.ArgumentParser(description='Gerenciar cache da aplica√ß√£o')
    parser.add_argument(
        'action',
        choices=['info', 'clear', 'clear-expired', 'clear-api', 'clear-db'],
        help='A√ß√£o a ser executada'
    )
    parser.add_argument(
        '--id',
        type=int,
        help='ID espec√≠fico para invalidar cache (usado com clear-api ou clear-db)'
    )
    parser.add_argument(
        '--periodo',
        type=int,
        help='Per√≠odo espec√≠fico para invalidar cache (usado com clear-api ou clear-db)'
    )

    args = parser.parse_args()

    try:
        cache_manager = CacheManager(cache_dir=CACHE_DIR)

        if args.action == 'info':
            show_cache_info(cache_manager)
        
        elif args.action == 'clear':
            clear_all_cache(cache_manager)
        
        elif args.action == 'clear-expired':
            clear_expired_cache(cache_manager)
        
        elif args.action == 'clear-api':
            clear_api_cache(cache_manager, args.id, args.periodo)
        
        elif args.action == 'clear-db':
            clear_db_cache(cache_manager, args.id, args.periodo)

    except Exception as e:
        logger.error(f"Erro ao executar a√ß√£o '{args.action}': {e}")
        sys.exit(1)


def show_cache_info(cache_manager: CacheManager):
    """Mostra informa√ß√µes sobre o cache"""
    logger.info("=== INFORMA√á√ïES DO CACHE ===")
    
    cache_info = cache_manager.get_cache_info()
    
    if not cache_info:
        logger.warning("N√£o foi poss√≠vel obter informa√ß√µes do cache")
        return
    
    print(f"üìÅ Diret√≥rio: {cache_info['cache_dir']}")
    print(f"üìä Total de arquivos: {cache_info['total_files']}")
    print(f"‚úÖ Arquivos v√°lidos: {cache_info['valid_files']}")
    print(f"‚è∞ Arquivos expirados: {cache_info['expired_files']}")
    print(f"üíæ Tamanho total: {cache_info['total_size_mb']} MB")
    
    if cache_info['total_files'] > 0:
        success_rate = (cache_info['valid_files'] / cache_info['total_files']) * 100
        print(f"üìà Taxa de cache v√°lido: {success_rate:.1f}%")


def clear_all_cache(cache_manager: CacheManager):
    """Remove todos os arquivos de cache"""
    logger.info("=== LIMPANDO TODO O CACHE ===")
    
    removed_count = cache_manager.clear_all()
    
    if removed_count > 0:
        logger.info(f"‚úÖ {removed_count} arquivos de cache removidos")
    else:
        logger.info("‚ÑπÔ∏è Nenhum arquivo de cache encontrado")


def clear_expired_cache(cache_manager: CacheManager):
    """Remove apenas arquivos de cache expirados"""
    logger.info("=== LIMPANDO CACHE EXPIRADO ===")
    
    removed_count = cache_manager.clear_expired()
    
    if removed_count > 0:
        logger.info(f"‚úÖ {removed_count} arquivos expirados removidos")
    else:
        logger.info("‚ÑπÔ∏è Nenhum arquivo expirado encontrado")


def clear_api_cache(cache_manager: CacheManager, id_value: int = None, periodo: int = None):
    """Remove cache espec√≠fico da API"""
    logger.info("=== LIMPANDO CACHE DA API ===")
    
    if id_value is not None and periodo is not None:
        # Cache espec√≠fico
        success = cache_manager.invalidate("api", id=id_value, periodo=periodo)
        if success:
            logger.info(f"‚úÖ Cache da API removido para ID={id_value}, Per√≠odo={periodo}")
        else:
            logger.info(f"‚ÑπÔ∏è Cache da API n√£o encontrado para ID={id_value}, Per√≠odo={periodo}")
    else:
        # Todos os caches da API (implementa√ß√£o mais complexa seria necess√°ria)
        logger.warning("‚ö†Ô∏è Para limpar todo cache da API, use 'clear' ou especifique --id e --periodo")


def clear_db_cache(cache_manager: CacheManager, id_value: int = None, periodo: int = None):
    """Remove cache espec√≠fico do banco de dados"""
    logger.info("=== LIMPANDO CACHE DO BANCO ===")
    
    if id_value is not None and periodo is not None:
        # Cache espec√≠fico
        success = cache_manager.invalidate("db", financial_instrument_id=id_value, periodo=periodo)
        if success:
            logger.info(f"‚úÖ Cache do banco removido para ID={id_value}, Per√≠odo={periodo}")
        else:
            logger.info(f"‚ÑπÔ∏è Cache do banco n√£o encontrado para ID={id_value}, Per√≠odo={periodo}")
    else:
        # Todos os caches do banco (implementa√ß√£o mais complexa seria necess√°ria)
        logger.warning("‚ö†Ô∏è Para limpar todo cache do banco, use 'clear' ou especifique --id e --periodo")


if __name__ == "__main__":
    main()
