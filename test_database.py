"""
Script para testar a conex√£o com o banco de dados SQL Server
"""

import logging
from config import DB_CONNECTION_STRING, IDS, PERIODO_MAPPING
from database_client import DatabaseClient

# Configurar logging para teste
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def test_database_connection():
    """Testa a conex√£o com o banco de dados"""
    logger.info("=== TESTE DE CONEX√ÉO COM BANCO DE DADOS ===")
    
    try:
        db_client = DatabaseClient()
        
        # Testar conex√£o
        if db_client.connect():
            logger.info("‚úÖ Conex√£o com banco de dados estabelecida com sucesso")
            
            # Testar uma query simples
            test_id = IDS[0]  # Primeiro ID da lista
            test_periodo = list(PERIODO_MAPPING.keys())[0]  # Primeiro per√≠odo
            
            logger.info(f"Testando query para ID={test_id}, Per√≠odo={test_periodo}")
            
            results = db_client.execute_fund_value_query(test_id, PERIODO_MAPPING[test_periodo])
            
            if results:
                logger.info(f"‚úÖ Query executada com sucesso: {len(results)} registros retornados")
                
                # Mostrar primeiro resultado
                first_result = results[0]
                logger.info("Primeiro resultado:")
                for key, value in first_result.items():
                    logger.info(f"  {key}: {value}")
                
                # Mostrar estat√≠sticas
                quota_values = [r.get("QuotaValue") for r in results if r.get("QuotaValue")]
                if quota_values:
                    logger.info(f"Estat√≠sticas dos valores de quota:")
                    logger.info(f"  Total de valores: {len(quota_values)}")
                    logger.info(f"  Valor m√≠nimo: {min(quota_values)}")
                    logger.info(f"  Valor m√°ximo: {max(quota_values)}")
                    logger.info(f"  Valor m√©dio: {sum(quota_values) / len(quota_values):.4f}")
                
            else:
                logger.warning("‚ö†Ô∏è Query executada mas nenhum resultado retornado")
            
            # Fechar conex√£o
            db_client.disconnect()
            return True
            
        else:
            logger.error("‚ùå Falha ao conectar com banco de dados")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro durante teste de banco: {e}")
        return False


def test_period_mapping():
    """Testa o mapeamento de per√≠odos"""
    logger.info("\n=== TESTE DE MAPEAMENTO DE PER√çODOS ===")
    
    logger.info("Mapeamento configurado:")
    for api_period, db_period in PERIODO_MAPPING.items():
        logger.info(f"  Per√≠odo API {api_period} ‚Üí Per√≠odo Banco {db_period}")
    
    # Verificar se todos os per√≠odos est√£o mapeados
    api_periods = set(range(1, 9))  # 1 a 8
    mapped_periods = set(PERIODO_MAPPING.keys())
    
    missing_periods = api_periods - mapped_periods
    if missing_periods:
        logger.warning(f"‚ö†Ô∏è Per√≠odos n√£o mapeados: {missing_periods}")
    else:
        logger.info("‚úÖ Todos os per√≠odos da API est√£o mapeados")
    
    return len(missing_periods) == 0


def test_connection_string():
    """Testa se a string de conex√£o est√° configurada"""
    logger.info("\n=== TESTE DE STRING DE CONEX√ÉO ===")
    
    if not DB_CONNECTION_STRING:
        logger.error("‚ùå String de conex√£o n√£o configurada")
        return False
    
    logger.info("‚úÖ String de conex√£o configurada")
    logger.info(f"Servidor: {DB_CONNECTION_STRING.split('Server=')[1].split(';')[0] if 'Server=' in DB_CONNECTION_STRING else 'N/A'}")
    logger.info(f"Database: {DB_CONNECTION_STRING.split('Database=')[1].split(';')[0] if 'Database=' in DB_CONNECTION_STRING else 'N/A'}")
    
    return True


def main():
    """Fun√ß√£o principal do teste"""
    logger.info("Iniciando testes de banco de dados...\n")
    
    # Testar string de conex√£o
    if not test_connection_string():
        logger.error("‚ùå Falha na valida√ß√£o da string de conex√£o")
        return False
    
    # Testar mapeamento de per√≠odos
    if not test_period_mapping():
        logger.error("‚ùå Falha na valida√ß√£o do mapeamento de per√≠odos")
        return False
    
    # Testar conex√£o com banco
    if not test_database_connection():
        logger.error("‚ùå Falha no teste de conex√£o com banco de dados")
        return False
    
    logger.info("\nüéâ Todos os testes de banco de dados passaram com sucesso!")
    logger.info("A aplica√ß√£o est√° pronta para combinar dados da API com dados do banco.")
    
    return True


if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ Testes de banco de dados conclu√≠dos com sucesso!")
        print("Execute 'python main.py' para iniciar a coleta completa de dados.")
    else:
        print("\nüí• Testes de banco de dados falharam!")
        print("Verifique as configura√ß√µes de banco antes de executar a aplica√ß√£o principal.")
    
    exit(0 if success else 1)
